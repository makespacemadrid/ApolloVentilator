(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3-color'), require('d3-scale'), require('d3-selection'), require('d3-axis')) :
    typeof define === 'function' && define.amd ? define(['d3-color', 'd3-scale', 'd3-selection', 'd3-axis'], factory) :
    (global = global || self, global.TimeChart = factory(global.d3, global.d3, global.d3, global.d3));
}(this, (function (d3Color, d3Scale, d3Selection, d3Axis) { 'use strict';

    /** lower bound */
    function domainSearch(data, start, end, value, key) {
        if (start >= end) {
            return start;
        }
        if (value <= key(data[start])) {
            return start;
        }
        if (value > key(data[end - 1])) {
            return end;
        }
        end -= 1;
        while (start + 1 < end) {
            const minDomain = key(data[start]);
            const maxDomain = key(data[end]);
            const ratio     = maxDomain <= minDomain ? 0 : (value - minDomain) / (maxDomain - minDomain);
            let expectedIndex = Math.ceil(start + ratio * (end - start));
            if (expectedIndex === end)
                expectedIndex--;
            else if (expectedIndex === start)
                expectedIndex++;
            const domain = key(data[expectedIndex]);
            if (domain < value) {
                start = expectedIndex;
            }
            else {
                end = expectedIndex;
            }
        }
        return end;
    }
    class EventDispatcher {
        constructor() {
            this.callbacks = [];
        }
        on(callback) {
            this.callbacks.push(callback);
        }
        dispatch(...args) {
            for (const cb of this.callbacks) {
                cb(...args);
            }
        }
    }

    function maxMin(arr) {
        let max = -Infinity;
        let min = Infinity;
        for (const v of arr) {
            if (v > max)
                max = v;
            if (v < min)
                min = v;
        }
        return { max, min };
    }
    class RenderModel {
        constructor(options) {
            this.options = options;
            this.xScale = d3Scale.scaleLinear();
            this.yScale = d3Scale.scaleLinear();
            this.xRange = null;
            this.yRange = null;
            this.seriesInfo = new Map();
            this.resized = new EventDispatcher();
            this.updated = new EventDispatcher();
            this.redrawRequested = false;
            if (options.xRange !== 'auto' && options.xRange) {
                this.xScale.domain([options.xRange.min, options.xRange.max]);
            }
            if (options.yRange !== 'auto' && options.yRange) {
                this.yScale.domain([options.yRange.min, options.yRange.max]);
            }
        }
        resize(width, height) {
            const op = this.options;
            this.xScale.range([op.paddingLeft, width - op.paddingRight]);
            this.yScale.range([height - op.paddingBottom, op.paddingTop]);
            this.resized.dispatch(width, height);
            this.requestRedraw();
        }
        update() {
            var _a, _b;
            for (const s of this.options.series) {
                if (!this.seriesInfo.has(s)) {
                    this.seriesInfo.set(s, {
                        yRangeUpdatedIndex: 0,
                    });
                }
            }
            const series = this.options.series.filter(s => s.data.length > 0);
            if (series.length === 0) {
                return;
            }
            const opXRange = this.options.xRange;
            const opYRange = this.options.yRange;
            {
                const maxDomain = Math.max(...series.map(s => s.data[s.data.length - 1].x));
                const minDomain = (_b = (_a = this.xRange) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : Math.min(...series.map(s => s.data[0].x));
                this.xRange = { max: maxDomain, min: minDomain };

                if (this.options.realTime || opXRange === 'auto') {
                    if (this.options.realTime) {
                        const currentDomain = this.xScale.domain();
                        const range = currentDomain[1] - currentDomain[0];
                        this.xScale.domain([maxDomain - range, maxDomain]);
                    }
                    else { // Auto
                        this.xScale.domain([minDomain, maxDomain]);
                    }
                }
                else if (opXRange) {
                    this.xScale.domain([opXRange.min, opXRange.max]);
                }
            }
            {
                const maxMinY = series.map(s => {                  
                    const newY = s.data.slice(this.seriesInfo.get(s).yRangeUpdatedIndex).map(d => d.y);
                    return maxMin(newY);
                }); 

                if (this.yRange) {
                    maxMinY.push(this.yRange);
                }

                const minDomain = Math.min(...maxMinY.map(s => s.min));
                const maxDomain = Math.max(...maxMinY.map(s => s.max));
                this.yRange = { max: maxDomain, min: minDomain };
                if (opYRange === 'auto') {
                    this.yScale.domain([minDomain, maxDomain]).nice();
                    for (const s of series){
                        this.seriesInfo.get(s).yRangeUpdatedIndex = s.data.length;
                    }
                }
                else if (opYRange) {
                    this.yScale.domain([opYRange.min, opYRange.max]);
                }
            }
            this.updated.dispatch();
        }
        requestRedraw() {
            if (this.redrawRequested) {
                return;
            }
            this.redrawRequested = true;
            requestAnimationFrame((time) => {
                this.redrawRequested = false;
                this.update();
            });
        }
    }

    /**
     * Common utilities
     * @module glMatrix
     */
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    if (!Math.hypot) Math.hypot = function () {
      var y = 0,
          i = arguments.length;

      while (i--) {
        y += arguments[i] * arguments[i];
      }

      return Math.sqrt(y);
    };

    /**
     * 2 Dimensional Vector
     * @module vec2
     */

    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */

    function create() {
      var out = new ARRAY_TYPE(2);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec2 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} a new 2D vector
     */

    function fromValues(x, y) {
      var out = new ARRAY_TYPE(2);
      out[0] = x;
      out[1] = y;
      return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */

    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      return out;
    }
    /**
     * Divides two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */

    function divide(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      return out;
    }
    /**
     * Negates the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to negate
     * @returns {vec2} out
     */

    function negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      return out;
    }
    /**
     * Returns the inverse of the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to invert
     * @returns {vec2} out
     */

    function inverse(out, a) {
      out[0] = 1.0 / a[0];
      out[1] = 1.0 / a[1];
      return out;
    }
    /**
     * Normalize a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to normalize
     * @returns {vec2} out
     */

    function normalize(out, a) {
      var x = a[0],
          y = a[1];
      var len = x * x + y * y;

      if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
      }

      out[0] = a[0] * len;
      out[1] = a[1] * len;
      return out;
    }
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach = function () {
      var vec = create();
      return function (a, stride, offset, count, fn, arg) {
        var i, l;

        if (!stride) {
          stride = 2;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
        }

        return a;
      };
    }();

    class LinkedWebGLProgram {
        constructor(gl, vertexSource, fragmentSource, debug) {
            var _a;
            this.gl = gl;
            const program = throwIfFalsy(gl.createProgram());
            gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource, debug)));
            gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource, debug)));
            gl.linkProgram(program);
            if (debug) {
                const success = gl.getProgramParameter(program, gl.LINK_STATUS);
                if (!success) {
                    const message = (_a = gl.getProgramInfoLog(program)) !== null && _a !== void 0 ? _a : 'Unknown Error.';
                    gl.deleteProgram(program);
                    throw new Error(message);
                }
            }
            this.program = program;
        }
        use() {
            this.gl.useProgram(this.program);
        }
    }
    function createShader(gl, type, source, debug) {
        var _a;
        const shader = throwIfFalsy(gl.createShader(type));
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (debug) {
            const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
            if (!success) {
                const message = (_a = gl.getShaderInfoLog(shader)) !== null && _a !== void 0 ? _a : 'Unknown Error.';
                gl.deleteShader(shader);
                throw new Error(message);
            }
        }
        return shader;
    }
    function throwIfFalsy(value) {
        if (!value) {
            throw new Error('value must not be falsy');
        }
        return value;
    }

    function resolveColorRGBA(color) {
        const rgbColor = typeof color === 'string' ? d3Color.rgb(color) : d3Color.rgb(color);
        return [rgbColor.r / 255, rgbColor.g / 255, rgbColor.b / 255, rgbColor.opacity];
    }

    const vsSource = `#version 300 es
layout (location = ${0 /* DATA_POINT */}) in vec2 aDataPoint;
layout (location = ${1 /* DIR */}) in vec2 aDir;

uniform vec2 uModelScale;
uniform vec2 uModelTranslation;
uniform vec2 uProjectionScale;
uniform float uLineWidth;

void main() {
    vec2 cssPose = uModelScale * aDataPoint + uModelTranslation;
    vec2 dir = uModelScale * aDir;
    dir = normalize(dir);
    vec2 pos2d = uProjectionScale * (cssPose + vec2(-dir.y, dir.x) * uLineWidth);
    gl_Position = vec4(pos2d, 0, 1);
}
`;
    const fsSource = `#version 300 es
precision lowp float;

uniform vec4 uColor;

out vec4 outColor;

void main() {
    outColor = uColor;
}
`;
    class LineChartWebGLProgram extends LinkedWebGLProgram {
        constructor(gl, debug) {
            super(gl, vsSource, fsSource, debug);
            this.locations = {
                uModelScale: throwIfFalsy(gl.getUniformLocation(this.program, 'uModelScale')),
                uModelTranslation: throwIfFalsy(gl.getUniformLocation(this.program, 'uModelTranslation')),
                uProjectionScale: throwIfFalsy(gl.getUniformLocation(this.program, 'uProjectionScale')),
                uLineWidth: throwIfFalsy(gl.getUniformLocation(this.program, 'uLineWidth')),
                uColor: throwIfFalsy(gl.getUniformLocation(this.program, 'uColor')),
            };
        }
    }
    const INDEX_PER_POINT = 4;
    const POINT_PER_DATAPOINT = 4;
    const INDEX_PER_DATAPOINT = INDEX_PER_POINT * POINT_PER_DATAPOINT;
    const BYTES_PER_POINT = INDEX_PER_POINT * Float32Array.BYTES_PER_ELEMENT;
    const BUFFER_DATA_POINT_CAPACITY = 128 * 1024;
    const BUFFER_CAPACITY = BUFFER_DATA_POINT_CAPACITY * INDEX_PER_DATAPOINT + 2 * POINT_PER_DATAPOINT;
    class VertexArray {
        /**
         * @param firstDataPointIndex At least 1, since datapoint 0 has no path to draw.
         */
        constructor(gl, dataPoints, firstDataPointIndex) {
            this.gl = gl;
            this.dataPoints = dataPoints;
            this.firstDataPointIndex = firstDataPointIndex;
            this.length = 0;
            this.vao = throwIfFalsy(gl.createVertexArray());
            this.bind();
            this.dataBuffer = throwIfFalsy(gl.createBuffer());
            gl.bindBuffer(gl.ARRAY_BUFFER, this.dataBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, BUFFER_CAPACITY * Float32Array.BYTES_PER_ELEMENT, gl.DYNAMIC_DRAW);
            gl.enableVertexAttribArray(0 /* DATA_POINT */);
            gl.vertexAttribPointer(0 /* DATA_POINT */, 2, gl.FLOAT, false, BYTES_PER_POINT, 0);
            gl.enableVertexAttribArray(1 /* DIR */);
            gl.vertexAttribPointer(1 /* DIR */, 2, gl.FLOAT, false, BYTES_PER_POINT, 2 * Float32Array.BYTES_PER_ELEMENT);
        }
        
        bind() {
            this.gl.bindVertexArray(this.vao);
        }
        clear() {
            this.length = 0;
        }
        delete() {
            this.clear();
            this.gl.deleteBuffer(this.dataBuffer);
            this.gl.deleteVertexArray(this.vao);
        }
        /**
         * @returns Next data point index, or `dataPoints.length` if all data added.
         */
        addDataPoints() {
            const dataPoints = this.dataPoints;
            const start = this.firstDataPointIndex + this.length;
            const remainDPCapacity = BUFFER_DATA_POINT_CAPACITY - this.length;
            const remainDPCount = dataPoints.length - start;
            const isOverflow = remainDPCapacity < remainDPCount;
            const numDPtoAdd = isOverflow ? remainDPCapacity : remainDPCount;
            let extraBufferLength = INDEX_PER_DATAPOINT * numDPtoAdd;
            if (isOverflow) {
                extraBufferLength += 2 * INDEX_PER_POINT;
            }
            const buffer      = new Float32Array(extraBufferLength);
            let bi            = 0;
            const vDP         = create();
            const vPreviousDP = create();
            const dir1        = create();
            const dir2        = create();

            function calc(dp, previousDP) {
                vDP[0]         = dp.x;
                vDP[1]         = dp.y;
                vPreviousDP[0] = previousDP.x;
                vPreviousDP[1] = previousDP.y;
                subtract(dir1, vDP, vPreviousDP);
                normalize(dir1, dir1);
                negate(dir2, dir1);
            }

            function put(v) {
                buffer[bi]     = v[0];
                buffer[bi + 1] = v[1];
                bi += 2;
            }

            let previousDP = dataPoints[start - 1];
            for (let i = 0; i < numDPtoAdd; i++) {
                const dp = dataPoints[start + i];
                calc(dp, previousDP);
                previousDP = dp;
                for (const dp of [vPreviousDP, vDP]) {
                    for (const dir of [dir1, dir2]) {
                        put(dp);
                        put(dir);
                    }
                }
            }

            if (isOverflow) {
                calc(dataPoints[start + numDPtoAdd], previousDP);
                for (const dir of [dir1, dir2]) {
                    put(vPreviousDP);
                    put(dir);
                }
            }
            const gl = this.gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.dataBuffer);
            gl.bufferSubData(gl.ARRAY_BUFFER, BYTES_PER_POINT * POINT_PER_DATAPOINT * this.length, buffer);
            this.length += numDPtoAdd;
            return start + numDPtoAdd;
        }
        draw(renderIndex) {
            const first = Math.max(0, renderIndex.min - this.firstDataPointIndex);
            const last = Math.min(this.length, renderIndex.max - this.firstDataPointIndex);
            const count = last - first;
            const gl = this.gl;
            this.bind();
            gl.drawArrays(gl.TRIANGLE_STRIP, first * POINT_PER_DATAPOINT, count * POINT_PER_DATAPOINT);
        }
    }
    /**
     * An array of `VertexArray` to represent a series
     *
     * `series.data`  index: 0  [1 ... C] [C+1 ... 2C] ... (C = `BUFFER_DATA_POINT_CAPACITY`)
     * `vertexArrays` index:     0         1           ...
     */
    class SeriesVertexArray {
        constructor(gl, series) {
            this.gl = gl;
            this.series = series;
            this.vertexArrays = [];
        }
        syncBuffer() {
            let activeArray;
            let bufferedDataPointNum = 1;
            const newArray = () => {
                activeArray = new VertexArray(this.gl, this.series.data, bufferedDataPointNum);
                this.vertexArrays.push(activeArray);
            };
            if (this.vertexArrays.length > 0) {
                const lastVertexArray = this.vertexArrays[this.vertexArrays.length - 1];
                bufferedDataPointNum = lastVertexArray.firstDataPointIndex + lastVertexArray.length;
                if (bufferedDataPointNum > this.series.data.length) {
                    throw new Error('remove data unsupported.');
                }
                if (bufferedDataPointNum === this.series.data.length) {
                    return;
                }
                activeArray = lastVertexArray;
            }
            else if (this.series.data.length >= 2) {
                newArray();
                activeArray = activeArray;
            }
            else {
                return; // Not enough data
            }
            while (true) {
                bufferedDataPointNum = activeArray.addDataPoints();
                if (bufferedDataPointNum >= this.series.data.length) {
                    if (bufferedDataPointNum > this.series.data.length) {
                        throw Error('Assertion failed.');
                    }
                    break;
                }
                newArray();
            }
        }
        draw(renderDomain) {
            const data = this.series.data;
            if (data.length === 0 || data[0].x > renderDomain.max || data[data.length - 1].x < renderDomain.min) {
                return;
            }
            const key = (d) => d.x;
            const minIndex = domainSearch(data, 1, data.length, renderDomain.min, key);
            const maxIndex = domainSearch(data, minIndex, data.length - 1, renderDomain.max, key) + 1;
            const minArrayIndex = Math.floor((minIndex - 1) / BUFFER_DATA_POINT_CAPACITY);
            const maxArrayIndex = Math.ceil((maxIndex - 1) / BUFFER_DATA_POINT_CAPACITY);
            const renderIndex = { min: minIndex, max: maxIndex };
            for (let i = minArrayIndex; i < maxArrayIndex; i++) {
                this.vertexArrays[i].draw(renderIndex);
            }
        }
    }
    class LineChartRenderer {
        constructor(model, gl, options) {
            this.model = model;
            this.gl = gl;
            this.options = options;
            this.program = new LineChartWebGLProgram(this.gl, this.options.debugWebGL);
            this.arrays = new Map();
            this.height = 0;
            this.width = 0;
            this.program.use();
            model.updated.on(() => this.drawFrame());
            model.resized.on((w, h) => this.onResize(w, h));
        }
        syncBuffer() {
            for (const s of this.options.series) {
                let a = this.arrays.get(s);
                if (!a) {
                    a = new SeriesVertexArray(this.gl, s);
                    this.arrays.set(s, a);
                }
                a.syncBuffer();
            }
        }
        onResize(width, height) {
            this.height = height;
            this.width = width;
            const scale = fromValues(width, height);
            divide(scale, scale, [2, 2]);
            inverse(scale, scale);
            const gl = this.gl;
            gl.uniform2fv(this.program.locations.uProjectionScale, scale);
        }
        drawFrame() {
            var _a;
            this.syncBuffer();
            this.syncDomain();
            const gl = this.gl;
            for (const [ds, arr] of this.arrays) {
                const color = resolveColorRGBA(ds.color);
                gl.uniform4fv(this.program.locations.uColor, color);
                const lineWidth = (_a = ds.lineWidth) !== null && _a !== void 0 ? _a : this.options.lineWidth;
                gl.uniform1f(this.program.locations.uLineWidth, lineWidth / 2);
                const renderDomain = {
                    min: this.model.xScale.invert(-lineWidth / 2),
                    max: this.model.xScale.invert(this.width + lineWidth / 2),
                };
                arr.draw(renderDomain);
            }
        }
        ySvgToView(v) {
            return -v + this.height / 2;
        }
        xSvgToView(v) {
            return v - this.width / 2;
        }
        syncDomain() {
            const m = this.model;
            const gl = this.gl;
            const zero = [this.xSvgToView(m.xScale(0)), this.ySvgToView(m.yScale(0))];
            const one = [this.xSvgToView(m.xScale(1)), this.ySvgToView(m.yScale(1))];
            // Not using vec2 for precision
            const scaling = [one[0] - zero[0], one[1] - zero[1]];
            gl.uniform2fv(this.program.locations.uModelScale, scaling);
            gl.uniform2fv(this.program.locations.uModelTranslation, zero);
        }
    }

    class CanvasLayer {
        constructor(el, options, model) {
            this.options = options;
            el.style.position = 'relative';
            const canvas = document.createElement('canvas');
            canvas.style.width = '100%';
            canvas.style.height = '100%';
            canvas.style.position = 'absolute';
            el.appendChild(canvas);
            const ctx = canvas.getContext('webgl2');
            if (!ctx) {
                throw new Error('Unable to initialize WebGL. Your browser or machine may not support it.');
            }
            const gl = ctx;
            this.gl = gl;
            const bgColor = resolveColorRGBA(options.backgroundColor);
            gl.clearColor(...bgColor);
            this.canvas = canvas;
            model.updated.on(() => this.clear());
            model.resized.on((w, h) => this.onResize(w, h));
        }
        onResize(width, height) {
            const canvas = this.canvas;
            const scale = this.options.pixelRatio;
            canvas.width = width * scale;
            canvas.height = height * scale;
            this.gl.viewport(0, 0, canvas.width, canvas.height);
        }
        clear() {
            const gl = this.gl;
            gl.clear(gl.COLOR_BUFFER_BIT);
        }
    }

    class SVGLayer {
        constructor(el) {
            el.style.position = 'relative';
            this.svgNode = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            this.svgNode.style.position = 'absolute';
            this.svgNode.style.width = '100%';
            this.svgNode.style.height = '100%';
            el.appendChild(this.svgNode);
        }
    }

    function zip(...rows) {
        return [...rows[0]].map((_, c) => rows.map(row => row[c]));
    }
    /**
     * least squares
     *
     * beta^T = [b, k]
     * X = [[1, x_1],
     *      [1, x_2],
     *      [1, x_3], ...]
     * Y^T = [y_1, y_2, y_3, ...]
     * beta = (X^T X)^(-1) X^T Y
     * @returns `{k, b}`
     */
    function linearRegression(data) {
        let sumX = 0;
        let sumY = 0;
        let sumXY = 0;
        let sumXX = 0;
        const len = data.length;
        for (const p of data) {
            sumX += p.x;
            sumY += p.y;
            sumXY += p.x * p.y;
            sumXX += p.x * p.x;
        }
        const det = (len * sumXX) - (sumX * sumX);
        const k = det === 0 ? 0 : ((len * sumXY) - (sumX * sumY)) / det;
        const b = (sumY - k * sumX) / len;
        return { k, b };
    }
    function scaleK(scale) {
        const domain = scale.domain();
        const range = scale.range();
        return (domain[1] - domain[0]) / (range[1] - range[0]);
    }
    /**
     * @returns If domain changed
     */
    function applyNewDomain(op, domain) {
        const inExtent = domain[1] - domain[0];
        const previousDomain = op.scale.domain();
        if ((previousDomain[1] - previousDomain[0]) * inExtent <= 0) {
            // forbidden reverse direction.
            return false;
        }
        const extent = Math.min(op.maxDomainExtent, op.maxDomain - op.minDomain, Math.max(op.minDomainExtent, inExtent));
        const deltaE = (extent - inExtent) / 2;
        domain[0] -= deltaE;
        domain[1] += deltaE;
        const deltaO = Math.min(Math.max(op.minDomain - domain[0], 0), op.maxDomain - domain[1]);
        domain[0] += deltaO;
        domain[1] += deltaO;
        const eps = extent * 1e-6;
        op.scale.domain(domain);
        if (zip(domain, previousDomain).some(([d, pd]) => Math.abs(d - pd) > eps)) {
            return true;
        }
        return false;
    }
    function variance(data) {
        const mean = data.reduce((a, b) => a + b) / data.length;
        return data.map(d => (d - mean) ** 2).reduce((a, b) => a + b) / data.length;
    }
    function clamp(value, min, max) {
        if (value > max) {
            return max;
        }
        else if (value < min) {
            return min;
        }
        return value;
    }



    const defaultAxisOptions = {
        minDomain: -Infinity,
        maxDomain: Infinity,
        minDomainExtent: 0,
        maxDomainExtent: Infinity,
    };


    class D3AxisRenderer {
        constructor(model, svg, options) {
            this.model = model;
            this.options = options;
            this.xAxis = d3Axis.axisBottom(this.model.xScale);
            this.yAxis = d3Axis.axisLeft(this.model.yScale);
            const d3Svg = d3Selection.select(svg);
            this.xg = d3Svg.append('g');
            this.yg = d3Svg.append('g');
            model.updated.on(() => this.update());
            model.resized.on((w, h) => this.onResize(w, h));
        }
        update() {
            const xs = this.model.xScale;
            const xts = d3Scale.scaleTime()
                .domain(xs.domain().map(d => d + this.options.baseTime))
                .range(xs.range());
            this.xAxis.scale(xts);
            this.xg.call(this.xAxis);
            this.yAxis.scale(this.model.yScale);
            this.yg.call(this.yAxis);
        }
        onResize(width, height) {
            const op = this.options;
            this.xg.attr('transform', `translate(0, ${height - op.paddingBottom})`);
            this.yg.attr('transform', `translate(${op.paddingLeft}, 0)`);
            this.update();
        }
    }

    class Legend {
        constructor(el, options) {
            var _a;
            this.el = el;
            this.options = options;
            el.style.position = 'relative';
            this.legend = document.createElement('chart-legend');
            const ls = this.legend.style;
            ls.position = 'absolute';
            ls.right = `${options.paddingRight}px`;
            ls.top = `${options.paddingTop}px`;
            const legendRoot = this.legend.attachShadow({ mode: 'open' });
            const style = document.createElement('style');
            style.textContent = `
        .timechart-legend.border {
            background: white;
            border: 1px solid hsl(0, 0%, 80%);
            border-radius: 3px;
            padding: 5px 10px;
        }
        .timechart-legend .item {
            display: flex;
            flex-flow: row nowrap;
            align-items: center;
        }
        .timechart-legend .item .example {
            width: 50px;
            margin-right: 10px;
            max-height: 1em;
        }`;
            legendRoot.appendChild(style);
            const border = document.createElement('div');
            border.className = 'timechart-legend border';
            for (const s of options.series) {
                const item = document.createElement('div');
                item.className = 'item';
                const example = document.createElement('div');
                example.className = 'example';
                example.style.height = `${(_a = s.lineWidth) !== null && _a !== void 0 ? _a : options.lineWidth}px`;
                example.style.backgroundColor = s.color.toString();
                item.appendChild(example);
                const name = document.createElement('label');
                name.textContent = s.name;
                item.appendChild(name);
                border.appendChild(item);
            }
            legendRoot.appendChild(border);
            el.appendChild(this.legend);
        }
        update() {
        }
    }

    const defaultOptions = {
        pixelRatio: window.devicePixelRatio,
        lineWidth: 1,
        backgroundColor: d3Color.rgb(255, 255, 255, 1),
        paddingTop: 10,
        paddingRight: 10,
        paddingLeft: 45,
        paddingBottom: 20,
        xRange: 'auto',
        yRange: 'auto',
        realTime: false,
        baseTime: 0,
        debugWebGL: false,
    };
    const defaultSeriesOptions = {
        color: d3Color.rgb(0, 0, 0, 1),
        name: '',
    };
    class TimeChart {
        constructor(el, options) {
            var _a, _b;
            this.el = el;
            options = options !== null && options !== void 0 ? options : {};
            const series = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.map(s => (Object.assign(Object.assign({ data: [] }, defaultSeriesOptions), s)))) !== null && _b !== void 0 ? _b : [];
            const renderOptions = Object.assign(Object.assign(Object.assign({}, defaultOptions), options), { series });
            this.model = new RenderModel(renderOptions);
            const canvasLayer = new CanvasLayer(el, renderOptions, this.model);
            const lineChartRenderer = new LineChartRenderer(this.model, canvasLayer.gl, renderOptions);
            const svgLayer     = new SVGLayer(el);
            const axisRenderer = new D3AxisRenderer(this.model, svgLayer.svgNode, renderOptions);
            const legend       = new Legend(el, renderOptions);
            this.onResize();
            window.addEventListener('resize', () => this.onResize());
        }
        onResize() {
            this.model.resize(this.el.clientWidth, this.el.clientHeight);
        }
        update() {
            this.model.requestRedraw();
        }
    }

    return TimeChart;

})));
